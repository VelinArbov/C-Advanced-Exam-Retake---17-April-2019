using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
 
namespace Exercise
{
    class Program
    {
        public static void Main(string[] args)
        {
            int parisEnergy = int.Parse(Console.ReadLine());
            int sizeOfMatrix = int.Parse(Console.ReadLine());
 
            var matrix = new char[sizeOfMatrix][];
 
            int parisRow = int.MinValue;
            int parisCol = int.MinValue;
 
            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                string currentRow = Console.ReadLine();
                matrix[row] = new char[currentRow.Length];
 
                for (int col = 0; col < matrix[row].Length; col++)
                {
                    matrix[row][col] = currentRow[col];
 
                    if (currentRow[col] == 'P')
                    {
                        parisRow = row;
                        parisCol = col;
                    }
                }
            }
 
            matrix[parisRow][parisCol] = '-';
 
            while (true)
            {
                var enemySpawn = Console.ReadLine()
                    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                    .ToArray();
 
                string parisDirection = enemySpawn[0];
                int enemyRow = int.Parse(enemySpawn[1]);
                int enemyCol = int.Parse(enemySpawn[2]);
 
                matrix[enemyRow][enemyCol] = 'S';
 
                if (parisDirection == "up")
                {
                    if (parisRow - 1 >= 0)
                    {
                        parisRow--;
                    }
 
                    parisEnergy--;
                }
                else if (parisDirection == "down")
                {
                    if (parisRow + 1 < sizeOfMatrix)
                    {
                        parisRow++;
                    }
 
                    parisEnergy--;
                }
                else if (parisDirection == "left")
                {
                    if (parisCol - 1 >= 0)
                    {
                        parisCol--;
                    }
 
                    parisEnergy--;
                }
                else if (parisDirection == "right")
                {
                    if (parisCol + 1 < sizeOfMatrix)
                    {
                        parisCol++;
                    }
 
                    parisEnergy--;
                }
 
                if (matrix[parisRow][parisCol] == 'H')
                {
                    matrix[parisRow][parisCol] = '-';
                    Console.WriteLine($"Paris has successfully sat on the throne! Energy left: {parisEnergy}");
                    break;
                }
                if(parisEnergy <= 0)
                {
                    matrix[parisRow][parisCol] = 'X';
                    Console.WriteLine($"Paris died at {parisRow};{parisCol}.");
                    break;
                }
                if (matrix[parisRow][parisCol] == 'S')
                {
                    if (parisEnergy - 2 > 0)
                    {
                        parisEnergy -= 2;
                        matrix[parisRow][parisCol] = '-';
                    }
                    else
                    {
                        matrix[parisRow][parisCol] = 'X';
                        Console.WriteLine($"Paris died at {parisRow};{parisCol}.");
                        break;
                    }
                }
            }
 
            foreach (var row in matrix)
            {
                Console.WriteLine(row);
            }
        }
    }
}
